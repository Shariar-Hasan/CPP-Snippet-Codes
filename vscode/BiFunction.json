{
  "Push Back": {
    "prefix": "pb",
    "body": ["push_back(${1});"],
    "description": "Inserts an element at the end of a container."
  },
  "Pop Back": {
    "prefix": "pob",
    "body": ["pop_back(${1});"],
    "description": "Removes the last element from a container."
  },
  "Push Front": {
    "prefix": "pf",
    "body": ["push_front(${1});"],
    "description": "Inserts an element at the beginning of a container."
  },

  "Make Pair": {
    "prefix": "mp",
    "body": ["make_pair(${1});"],
    "description": "Creates a pair object with two values."
  },

  "Max Element": {
    "prefix": "maxall",
    "body": ["*max_element(${1});"],
    "description": "Finds the maximum element in a container."
  },
  "Min Element": {
    "prefix": "minall",
    "body": ["*min_element(${1});"],
    "description": "Finds the minimum element in a container."
  },
  "Memset Function": {
    "prefix": "memset",
    "body": ["memset(${1}, 0, sizeof(${1}));"],
    "description": "Sets a block of memory to a particular value."
  },

  "Sort Function": {
    "prefix": "sort",
    "body": ["sort(${1});"],
    "description": "Sorts a container in ascending order."
  },
  "Reverse Sort Function": {
    "prefix": "revsort",
    "body": ["sort(${1}, [](int a, int b) { return a > b; });"],
    "description": "Sorts a container for array in descending order."
  },

  "memset funtion": {
    "prefix": "memset",
    "body": ["memset(${1}, 0, sizeof(${1}));"],
    "description": "Fill 0 | -1 to any array"
  },
  "count funtion": {
    "prefix": "count",
    "body": ["count(${1}, ${1} + n, ${1});", ""],
    "description": "Count the number of appearance in a certain iterable"
  },

  "Max Function": {
    "prefix": "max",
    "body": ["max(${1});"],
    "description": "Finds the maximum of two values."
  },
  "Min Function": {
    "prefix": "min",
    "body": ["min(${1});"],
    "description": "Finds the minimum of two values."
  },

  "If": {
    "prefix": "IF",
    "body": ["if(${1}){", "\t", "}"],
    "description": "If Statement in cpp."
  },
  "If else": {
    "prefix": "IFELSE",
    "body": ["if(${1}){", "\t", "}else{", "\t", "}"],
    "description": "If else Statement in cpp."
  },
  "If elseif": {
    "prefix": "IFELSEIF",
    "body": ["if(${1}){", "\t", "}else if(){", "\t", "}"],
    "description": "Else if Statement in cpp."
  }
}
